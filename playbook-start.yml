#start ec2 instance

- name: Start sandbox instances
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Create an EC2 key
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ region }}"
        force: false
      register: ec2_key

    - name: Save EC2 private key
      copy:
        content: "{{ ec2_key.key.private_key }}" 
        dest: "{{ ansible_ssh_private_key_file }}"
        mode: 0600
      when: ec2_key.changed

    - name: Launch instance
      ec2:
         key_name: "{{ key_name }}"
         group: "{{ security_group }}"
         instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         wait: true
         region: "{{ region }}"
         vpc_subnet_id: "{{ vpc_subnet_id }}"
         exact_count: 1
         count_tag:
            Playbook: "{{ playbook_tag }}"
            Suite: "{{ suite_tag }}"
            Build: "{{ build_tag }}" 
         instance_tags:
            Name: "{{ playbook_tag }}-{{ suite_tag }}" # just a human-readble name
            Playbook: "{{ playbook_tag }}" # same for all instances created with this playbook
            # add these by --extra-vars "build_tag=build123 suite_tag=ignite2"
            Suite: "{{ suite_tag }}" # unique for the whole test-suite, key to start and stop all suite instances
            Build: "{{ build_tag }}" # unique for each build, key to start and stop 1 instance,
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.private_ip }}" 
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Save instance address 
      local_action:
        module: lineinfile
        dest: "./hosts/host-{{ suite_tag }}-{{ build_tag }}"
        line: "{{ item.private_ip}}"
        create: yes
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.private_ip }}"
        port: 22
        delay: 5
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"
      
- name: Configure instance(s) 1
  hosts: all
  remote_user: ubuntu
  become: True
  gather_facts: False
  pre_tasks:
    - name: Install python
      raw: test -e /usr/bin/python || (apt -y upgrade && apt -y update && apt install -y python-minimal)
  tasks:
    - name: Install docker
      apt:
        name: "{{ item }}"
        update_cache: yes
        cache_valid_time: 86400 #One day
      with_items:
        - docker.io

- name: Configure instance(s) 2
  hosts: all
  remote_user: ubuntu
  become: True
  gather_facts: False
  roles:
    - selenoid
